/* automatically generated by rust-bindgen 0.66.1 */

extern "C" {
    pub fn testclib_add(a: ::core::ffi::c_int, b: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pointer_demo_struct {
    pub some_number: ::core::ffi::c_uint,
    pub some_char_ptr: *const ::core::ffi::c_char,
}
#[test]
fn bindgen_test_layout_pointer_demo_struct() {
    const UNINIT: ::core::mem::MaybeUninit<pointer_demo_struct> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<pointer_demo_struct>(),
        16usize,
        concat!("Size of: ", stringify!(pointer_demo_struct))
    );
    assert_eq!(
        ::core::mem::align_of::<pointer_demo_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(pointer_demo_struct))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).some_number) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pointer_demo_struct),
            "::",
            stringify!(some_number)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).some_char_ptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pointer_demo_struct),
            "::",
            stringify!(some_char_ptr)
        )
    );
}
extern "C" {
    pub fn test_pointer_manipulation(demo: *mut pointer_demo_struct);
}
